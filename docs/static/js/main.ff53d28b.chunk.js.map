{"version":3,"sources":["components/08-useReducer/todoReducer.js","components/08-useReducer/TodoListItem.js","components/08-useReducer/TodoList.js","components/08-useReducer/TodoAdd.js","hooks/useForm.js","components/08-useReducer/TodoApp.js","index.js"],"names":["todoReducer","state","action","type","payload","filter","todo","id","map","done","TodoListItem","i","handleDelete","handleToggle","className","onClick","desc","TodoList","todos","TodoAdd","handleAddTodo","initialState","useState","values","setValues","target","name","value","useForm","description","handleInputChange","reset","onSubmit","e","preventDefault","trim","length","newTodo","Date","getTime","placeholder","autoComplete","onChange","init","JSON","parse","localStorage","getItem","TodoApp","useReducer","dispatch","useEffect","setItem","stringify","todoId","divMostrar","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.ff53d28b.chunk.js","sourcesContent":["//Este es nuestro \"Reducer\"\r\n\r\nexport const todoReducer = (state = [], action) => {\r\n  switch (action?.type) {\r\n    case \"add\":\r\n      return [...state, action.payload];\r\n\r\n    case \"delete\":\r\n      return state.filter((todo) => todo.id !== action.payload);\r\n\r\n    //Forma corta de hacer el toggle con un \"return implícito y usando el ternario\" (*)\r\n    case \"toggle\":\r\n      return state.map((todo) =>\r\n        todo.id === action.payload ? { ...todo, done: !todo.done } : todo\r\n      );\r\n    //Si no se coincide con ningún \"case\" entonces retorna el state\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React from \"react\";\r\n\r\n//Recibe los parametros de su Componente Padre \"TodoList\"\r\nexport const TodoListItem = ({ i, todo, handleDelete, handleToggle }) => {\r\n  return (\r\n    <div>\r\n      <li key={todo.id} className=\"list-group-item\">\r\n        <p\r\n          className={`${todo.done && \"complete\"}`}\r\n          onClick={() => handleToggle(todo.id)}\r\n        >\r\n          {i + 1}. {todo.desc}\r\n        </p>\r\n        <button\r\n          className=\"btn btn-danger\"\r\n          onClick={() => {\r\n            handleDelete(todo.id);\r\n          }}\r\n        >\r\n          Borrar\r\n        </button>\r\n      </li>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { TodoListItem } from \"./TodoListItem\";\r\n\r\n//Componente padre que le pasará props a su componente hijo \"TodoListItem\"\r\nexport const TodoList = ({ todos, handleDelete, handleToggle }) => {\r\n  return (\r\n    <div>\r\n      <ul className=\"list-group list-group-flush\">\r\n        {todos.map((todo, i) => (\r\n          <TodoListItem\r\n            key={todo.id}\r\n            todo={todo}\r\n            i={i}\r\n            handleDelete={handleDelete}\r\n            handleToggle={handleToggle}\r\n          />\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { useForm } from \"../../hooks/useForm\";\r\n\r\nexport const TodoAdd = ({ handleAddTodo }) => {\r\n  const [{ description }, handleInputChange, reset] = useForm({\r\n    description: \"\",\r\n  });\r\n\r\n  //Creamos el evento para el \"form\" el cuál se ejecutará cuando den click/submit al botón \"Agregar\"\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    //Validamos que no se envie campos vacíos:\r\n    if (description.trim().length <= 1) {\r\n      return;\r\n    }\r\n\r\n    //Creo un nuevo todo el cual agregaré mediante \"action\"\r\n    const newTodo = {\r\n      id: new Date().getTime(),\r\n      desc: description,\r\n      done: false,\r\n    };\r\n\r\n    //Asi le pasamos nuestra acción a nuestro \"todoReducer\"\r\n    handleAddTodo(newTodo);\r\n\r\n    //Limpiamos el \"input\" una vez hayamos dado click en el botón \"Agregar\"\r\n    reset();\r\n  };\r\n  return (\r\n    <>\r\n      <h4>Agregar TODO</h4>\r\n      <hr />\r\n\r\n      <form onSubmit={handleSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"description\"\r\n          className=\"form-control\"\r\n          placeholder=\"Aprender...\"\r\n          autoComplete=\"off\"\r\n          value={description}\r\n          onChange={handleInputChange}\r\n        />\r\n\r\n        <button\r\n          type=\"submit\"\r\n          className=\"btn btn-outline-primary mt-1 btn-block btn-add\"\r\n        >\r\n          Agregar\r\n        </button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n","import { useState } from \"react\";\r\n\r\n//Al parámetro initialState le doy un arreglo vacío por default en caso el usuario no me pase nada(Así NO \"revienta\" mi aplicación)\r\nexport const useForm = (initialState = {}) => {\r\n  const [values, setValues] = useState(initialState);\r\n\r\n  //Con esta función borramos/reseteamos el input\r\n  const reset = () => {\r\n    setValues(initialState);\r\n  };\r\n  //Haremos por separado al evento de la función, y no retonaremos todo en uno como en \"OTRA FORMA\"\r\n  const handleInputChange = ({ target }) => {\r\n    setValues({\r\n      ...values,\r\n      [target.name]: target.value,\r\n    });\r\n  };\r\n\r\n  /*OTRA FORMA PARA RETORNAR TODO EN UNO:\r\n  return [values, ({target})=>{\r\n      setValues({\r\n          ...values,\r\n          [target.name]: target.value\r\n      });\r\n  }];\r\n  */\r\n\r\n  return [values, handleInputChange, reset];\r\n};\r\n\r\n/*OBSERVACIÓN:\r\n\r\n-Es un Custom Hook que se encargará de manejar los formularios\r\n-Este es el custom hook para los formularios , o sea para código que se repite y que se\r\nusará en varios formularios\r\n\r\n*/\r\n","import React, { useEffect, useReducer } from \"react\";\r\nimport { todoReducer } from \"./todoReducer\";\r\nimport { TodoList } from \"./TodoList\";\r\nimport { TodoAdd } from \"./TodoAdd\";\r\n\r\nimport \"./styles.css\";\r\n\r\n//La función \"init\" se llama y LO QUE SEA QUE RETORNE SERÁ EL \"initialState\"\r\nconst init = () => {\r\n  //Obten los elementos de \"localStorage\", si devuelve null manda un arreglo vacío\r\n  return JSON.parse(localStorage.getItem(\"todos\")) || [];\r\n};\r\n\r\nexport const TodoApp = () => {\r\n  const [todos, dispatch] = useReducer(todoReducer, [], init);\r\n\r\n  //Si los \"todos\" cambian significa que tengo que volver a grabar en el \"LocalStorage\"\r\n  useEffect(() => {\r\n    //Almacenamos los \"todos\" en el \"LocalStorage\"\r\n    localStorage.setItem(\"todos\", JSON.stringify(todos));\r\n  }, [todos]);\r\n\r\n  //------------------Eventos------------------\r\n  const handleDelete = (todoId) => {\r\n    const action = {\r\n      type: \"delete\", //Especificandole la acción a mi \"todoReducer\"\r\n      payload: todoId, //Mi \"todoReducer\" necesita el id del elemento al que se tiene que eliminar (método filter)\r\n    };\r\n\r\n    dispatch(action);\r\n  };\r\n\r\n  const handleToggle = (todoId) => {\r\n    dispatch({\r\n      type: \"toggle\",\r\n      payload: todoId,\r\n    });\r\n  };\r\n\r\n  const handleAddTodo = (newTodo) => {\r\n    dispatch({\r\n      type: \"add\",\r\n      payload: newTodo,\r\n    });\r\n  };\r\n\r\n  //---------------------Fin Eventos----------------------\r\n\r\n  return (\r\n    <div>\r\n      <h1>Todo App ({todos.length})</h1>\r\n      <hr />\r\n\r\n      <div className=\"row\">\r\n        <div className=\"col-7\">\r\n          <TodoList\r\n            todos={todos}\r\n            handleDelete={handleDelete}\r\n            handleToggle={handleToggle}\r\n          />\r\n        </div>\r\n\r\n        <div className=\"col-5\">\r\n          <TodoAdd handleAddTodo={handleAddTodo} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { TodoApp } from \"./components/08-useReducer/TodoApp\";\n\n//Obtengo el div donde se renderizará mi app React \"ToDo App\"\nconst divMostrar = document.getElementById(\"root\");\nReactDOM.render(<TodoApp />, divMostrar);\n"],"sourceRoot":""}